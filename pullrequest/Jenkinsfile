@Library('k8s-jenkins-sharedLibraries') _
pipeline{
    agent {
        kubernetes{
            cloud 'kubernetes'
            namespace 'default'
            defaultContainer 'jnlp'
            yaml """
apiVersion: v1
kind: Pod
metadata:
    name: jenkins-slave
spec:
  serviceAccountName: myjenkins
  containers:
    - name: jnlp
      image: jenkins/inbound-agent
      imagePullPolicy: Always
      args: ['\$(JENKINS_SECRET)', '\$(JENKINS_NAME)']
      env:
        - name: GIT_SSL_NO_VERIFY
          value: "true"
      resources:
        requests:
            cpu: 10m
            memory: 256Mi
        limits:
            cpu: 512m
            memory: 1Gi
    - name: maven
      image: maven:3.8.5-openjdk-11-slim
      imagePullPolicy: Always
      command: ['cat']
      tty: true
      resources:
        requests:
          cpu: 512m
          memory: 512Mi
        limits:
          memory: 1Gi
          cpu: 512m
          ephemeral-storage: 1Gi
      securityContext:
        runAsUser: 0
    - name: node
      image: node:lts-stretch-slim
      imagePullPolicy: Always   
      command: ['cat']
      tty: true
      resources:
        requests:
          cpu: 100m
          memory: 256Mi
        limits:
          memory: 1Gi
          cpu: 512m
          ephemeral-storage: 1Gi
      securityContext:
        runAsUser: 0
    - name: kaniko
      image: gcr.io/kaniko-project/executor:debug
      imagePullPolicy: Always   
      command: ['cat']
      tty: true
      resources:
        requests:
          cpu: 200m
          memory: 512Mi
        limits:
          memory: 1Gi
          cpu: 512m
          ephemeral-storage: 1Gi
      securityContext:
        runAsUser: 0
      env:
       - name: GOOGLE_APPLICATION_CREDENTIALS
         value: /kaniko/.docker
      volumeMounts:
        - name: kaniko-secret
          mountPath: /kaniko/.docker
          readOnly: false
  volumes:
  - name: kaniko-secret                                 
    secret:
      secretName: pull-secret-docker-hub
      items:
      - key: .dockerconfigjson
        path: config.json
"""
        }
    }
    options {
        timeout(activity: true, time: 2, unit: 'HOURS')
        parallelsAlwaysFailFast()
        disableConcurrentBuilds()
    }
    parameters {
        string(name: 'BRANCH', defaultValue: 'master', description: 'Git project source branch', trim: true)
    }
    stages {
        stage('Get-Data') {
            steps {
                script {
                    container('jnlp') {
                        projectInfo = utils.getProjectInfo(URL_PROJECTS_YAML_RAW)
                        println projectInfo
                    }
                }
            }
        }
        stage('Fetch Code') {
            steps {
                script {
                    container('jnlp'){
                        utils.fetchCode(projectInfo.get('ssh_clone_url'), params.BRANCH)
                        appName = sh(label:"appName", script:"basename ${projectInfo.get('ssh_clone_url')} .git", returnStdout: true).trim()
                        baseName ="niels58/${appName}"
                        tagName = "pe-${params.BRANCH}-${BUILD_NUMBER}"
                        println """
                        APP_NAME :::: ${appName}
                        BASE_NAME :::: ${baseName}
                        TAG_NAME :::: ${tagName}
                        """
                    }
                }
            }
        }
        stage('Build') {
            steps {
                script {
                    container('maven') {
                        utils.build(projectInfo.get('cmd_build'))
                    }
                }
            }
        }
        stage('Push') {
            steps {
                script {
                    container('kaniko') {
                        utils.pushKaniko(baseName, tagName)
                    }
                }
            }
        }
        stage('Deploy') {
            steps {
                script {
                    container('jnlp') {
                        build(wait: true, job: 'Tools/k8s-deployment', parameters: [
                                    string(name: 'APP_NAME', value: appName ), 
                                    string(name: 'FINAL_TAG', value: "${baseName}:${tagName}" )
                                    ])
                    }
                }
            }
        }
    }
}
